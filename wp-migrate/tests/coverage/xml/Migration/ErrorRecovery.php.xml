<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="ErrorRecovery.php" path="/Migration">
    <totals>
      <lines total="261" comments="35" code="226" executable="107" executed="81" percent="75.70"/>
      <methods count="12" tested="9" percent="75.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="2" tested="1" percent="50.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="WpMigrate\Migration\DefaultRetryConfig" start="16" executable="5" executed="5" crap="5">
      <namespace name="WpMigrate\Migration"/>
      <method name="getMaxRetries" signature="getMaxRetries(): int" start="17" end="19" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getBaseBackoffSeconds" signature="getBaseBackoffSeconds(): int" start="21" end="23" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getMaxBackoffSeconds" signature="getMaxBackoffSeconds(): int" start="25" end="27" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getLogTailLimit" signature="getLogTailLimit(): int" start="29" end="31" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getRecentLogsLimit" signature="getRecentLogsLimit(): int" start="33" end="35" crap="1" executable="1" executed="1" coverage="100"/>
    </class>
    <class name="WpMigrate\Migration\ErrorRecovery" start="38" executable="101" executed="75" crap="58.11">
      <namespace name="WpMigrate\Migration"/>
      <method name="__construct" signature="__construct(?WpMigrate\Migration\RetryConfigInterface $config)" start="45" end="52" crap="1" executable="6" executed="6" coverage="100"/>
      <method name="is_recoverable_error" signature="is_recoverable_error(string $errorMessage, array $context): bool" start="71" end="90" crap="7.07" executable="9" executed="8" coverage="88.888888888889"/>
      <method name="execute_with_retry" signature="execute_with_retry(callable $operation, string $jobId, string $operationName)" start="101" end="164" crap="8" executable="42" executed="42" coverage="100"/>
      <method name="calculate_backoff_delay" signature="calculate_backoff_delay(int $attempt): int" start="169" end="178" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="get_retry_stats" signature="get_retry_stats(string $jobId): array" start="183" end="222" crap="182" executable="24" executed="0" coverage="0"/>
      <method name="should_retry_job" signature="should_retry_job(string $jobId, array $job): bool" start="227" end="243" crap="5.05" executable="8" executed="7" coverage="87.5"/>
      <method name="schedule_retry" signature="schedule_retry(string $jobId, array $job): int" start="248" end="259" crap="1" executable="8" executed="8" coverage="100"/>
    </class>
    <coverage>
      <line nr="4">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
      </line>
      <line nr="18">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_complete_migration_workflow"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_invalid_state_transitions_rejected"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_rollback_validation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_progress_calculation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_metadata_accumulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
      </line>
      <line nr="22">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_complete_migration_workflow"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_invalid_state_transitions_rejected"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_rollback_validation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_progress_calculation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_metadata_accumulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
      </line>
      <line nr="26">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_complete_migration_workflow"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_invalid_state_transitions_rejected"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_rollback_validation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_progress_calculation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_metadata_accumulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
      </line>
      <line nr="30">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_complete_migration_workflow"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_invalid_state_transitions_rejected"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_rollback_validation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_progress_calculation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_metadata_accumulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
      </line>
      <line nr="34">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_complete_migration_workflow"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_invalid_state_transitions_rejected"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_rollback_validation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_progress_calculation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_metadata_accumulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
      </line>
      <line nr="46">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_complete_migration_workflow"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_invalid_state_transitions_rejected"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_rollback_validation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_progress_calculation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_metadata_accumulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
      </line>
      <line nr="47">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_complete_migration_workflow"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_invalid_state_transitions_rejected"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_rollback_validation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_progress_calculation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_metadata_accumulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
      </line>
      <line nr="48">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_complete_migration_workflow"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_invalid_state_transitions_rejected"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_rollback_validation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_progress_calculation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_metadata_accumulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
      </line>
      <line nr="49">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_complete_migration_workflow"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_invalid_state_transitions_rejected"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_rollback_validation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_progress_calculation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_metadata_accumulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
      </line>
      <line nr="50">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_complete_migration_workflow"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_invalid_state_transitions_rejected"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_rollback_validation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_progress_calculation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_metadata_accumulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
      </line>
      <line nr="51">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_complete_migration_workflow"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_invalid_state_transitions_rejected"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_rollback_validation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_progress_calculation"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_metadata_accumulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_handshake_authentication_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_failure"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_db_export_missing_job_id"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_unknown_action"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_upload_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_chunk_listing"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_progress_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_logs_tail_endpoint"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_authentication_wrapper_error_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_different_http_methods"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_concurrent_requests"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_malformed_json_handling"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_large_request_body"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_rate_limiting_simulation"/>
      </line>
      <line nr="72">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
      </line>
      <line nr="74">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
      </line>
      <line nr="75">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
      </line>
      <line nr="76">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsTimeoutErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsConnectionErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsNetworkErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsHttpTimeout"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsDatabaseDeadlock"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\MigrationWorkflowTest::test_workflow_with_error_recovery"/>
      </line>
      <line nr="81">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
      </line>
      <line nr="82">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorDetectsServerErrors"/>
      </line>
      <line nr="85">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
      </line>
      <line nr="89">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testIsRecoverableErrorRejectsSyntaxErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
      </line>
      <line nr="102">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
      </line>
      <line nr="103">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
      </line>
      <line nr="104">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
      </line>
      <line nr="106">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
      </line>
      <line nr="108">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
      </line>
      <line nr="109">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
      </line>
      <line nr="110">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
      </line>
      <line nr="113">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
      </line>
      <line nr="115">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
      </line>
      <line nr="116">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
      </line>
      <line nr="117">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
      </line>
      <line nr="118">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
      </line>
      <line nr="122">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
      </line>
      <line nr="124">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="125">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="126">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="128">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="129">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="130">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="133">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="134">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="135">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="136">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="137">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="138">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="141">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="142">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="146">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
      </line>
      <line nr="148">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
      </line>
      <line nr="149">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
      </line>
      <line nr="150">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
      </line>
      <line nr="153">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
      </line>
      <line nr="158">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="159">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="160">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="163">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="170">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
      <line nr="173">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
      <line nr="175">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
      <line nr="177">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayIncreasesWithAttempts"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testCalculateBackoffDelayRespectsMaximum"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
      <line nr="228">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
      </line>
      <line nr="232">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
      </line>
      <line nr="233">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
      </line>
      <line nr="235">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
      </line>
      <line nr="236">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
      </line>
      <line nr="237">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
      </line>
      <line nr="242">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldRetryJobWithMostlyRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testShouldNotRetryJobWithMostlyNonRecoverableErrors"/>
      </line>
      <line nr="249">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
      <line nr="250">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
      <line nr="252">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
      <line nr="253">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
      <line nr="254">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
      <line nr="255">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
      <line nr="258">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
      <line nr="111">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetrySucceedsOnFirstAttempt"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_db_import_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_search_replace_success"/>
        <covered by="WpMigrate\Tests\Rest\ApiTest::test_command_finalize_success"/>
      </line>
      <line nr="119">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
      </line>
      <line nr="131">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="139">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="151">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryRetriesRecoverableErrors"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
      </line>
      <line nr="161">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryFailsAfterMaxRetries"/>
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testExecuteWithRetryDoesNotRetryNonRecoverableErrors"/>
      </line>
      <line nr="256">
        <covered by="WpMigrate\Tests\Migration\ErrorRecoveryTest::testScheduleRetryReturnsPositiveDelay"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">WpMigrate\Migration</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="3"/>
      <line no="4">
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">defined</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'ABSPATH'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXIT">exit</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="5"/>
      <line no="6">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">WpMigrate\Logging\JsonLogger</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="7"/>
      <line no="8">
        <token name="T_INTERFACE">interface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RetryConfigInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="9">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getMaxRetries</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getBaseBackoffSeconds</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getMaxBackoffSeconds</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getLogTailLimit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getRecentLogsLimit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="15"/>
      <line no="16">
        <token name="T_FINAL">final</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DefaultRetryConfig</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RetryConfigInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getMaxRetries</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">3</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="20"/>
      <line no="21">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getBaseBackoffSeconds</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">30</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="24"/>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getMaxBackoffSeconds</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">900</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="28"/>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getLogTailLimit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1000</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="32"/>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getRecentLogsLimit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">50</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="36">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="37"/>
      <line no="38">
        <token name="T_FINAL">final</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ErrorRecovery</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$maxRetries</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$baseBackoffSeconds</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$maxBackoffSeconds</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$logTailLimit</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$recentLogsLimit</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="44"/>
      <line no="45">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">RetryConfigInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DefaultRetryConfig</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">maxRetries</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMaxRetries</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">baseBackoffSeconds</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getBaseBackoffSeconds</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">maxBackoffSeconds</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMaxBackoffSeconds</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logTailLimit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getLogTailLimit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">recentLogsLimit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getRecentLogsLimit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="53"/>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="55">
        <token name="T_DOC_COMMENT">     * Error patterns that are recoverable</token>
      </line>
      <line no="56">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RECOVERABLE_ERRORS</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'timeout'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'connection'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'temporary'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'lock_wait'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'deadlock'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'network'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'chunk_upload_failed'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'database_connection_lost'</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="67"/>
      <line no="68">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="69">
        <token name="T_DOC_COMMENT">     * Check if an error is recoverable</token>
      </line>
      <line no="70">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_recoverable_error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$context</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$errorLower</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="73"/>
      <line no="74">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">RECOVERABLE_ERRORS</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strpos</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errorLower</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="79"/>
      <line no="80">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Check context for recoverable conditions</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$context</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'http_code'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$context</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'http_code'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">408</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">429</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">500</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">502</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">503</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">504</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="84"/>
      <line no="85">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$context</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'db_error_code'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$context</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'db_error_code'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'1213'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'1205'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Deadlock and lock wait timeout</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="88"/>
      <line no="89">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="91"/>
      <line no="92">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="93">
        <token name="T_DOC_COMMENT">     * Execute operation with retry logic</token>
      </line>
      <line no="94">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="95">
        <token name="T_DOC_COMMENT">     * @param callable $operation Function to retry</token>
      </line>
      <line no="96">
        <token name="T_DOC_COMMENT">     * @param string $jobId Job identifier for logging</token>
      </line>
      <line no="97">
        <token name="T_DOC_COMMENT">     * @param string $operationName Name of the operation for logging</token>
      </line>
      <line no="98">
        <token name="T_DOC_COMMENT">     * @return mixed Result of the operation</token>
      </line>
      <line no="99">
        <token name="T_DOC_COMMENT">     * @throws \Throwable Last exception if all retries fail</token>
      </line>
      <line no="100">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">execute_with_retry</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CALLABLE">callable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$operation</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jobId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$operationName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JsonLogger</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jobId</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$lastException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="105"/>
      <line no="106">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">maxRetries</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">            </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">log</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'retry_attempt'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'info'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">Attempting </token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$operationName</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_ENCAPSED_AND_WHITESPACE"> (attempt </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">")"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'attempt'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'max_attempts'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">maxRetries</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="112"/>
      <line no="113">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$operation</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="114"/>
      <line no="115">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">log</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'retry_success'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'info'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$operationName</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_ENCAPSED_AND_WHITESPACE"> succeeded on retry</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'attempt'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'total_attempts'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="121"/>
      <line no="122">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="123"/>
      <line no="124">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\Throwable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$lastException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="127"/>
      <line no="128">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$isRecoverable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">is_recoverable_error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMessage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'exception_type'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">get_class</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'http_code'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getCode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="132"/>
      <line no="133">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">log</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'retry_error'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$isRecoverable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'warning'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'error'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">Error in </token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$operationName</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">: </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMessage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="134">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'attempt'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="135">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'max_attempts'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">maxRetries</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="136">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'is_recoverable'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$isRecoverable</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="137">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'error_type'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">get_class</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'error_code'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getCode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="140"/>
      <line no="141">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$isRecoverable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">maxRetries</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_BREAK">break</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="144"/>
      <line no="145">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// Calculate backoff delay with exponential backoff</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$backoffSeconds</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">calculate_backoff_delay</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="147"/>
      <line no="148">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">log</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'retry_backoff'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'info'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">Waiting </token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$backoffSeconds</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_ENCAPSED_AND_WHITESPACE"> seconds before retry</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'backoff_seconds'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$backoffSeconds</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'next_attempt'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="152"/>
      <line no="153">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sleep</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$backoffSeconds</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="154">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="155">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="156"/>
      <line no="157">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// All retries exhausted</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">log</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'retry_exhausted'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'error'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$operationName</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_ENCAPSED_AND_WHITESPACE"> failed after </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">maxRetries</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" attempts"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'total_attempts'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">maxRetries</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="160">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'final_error'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$lastException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$lastException</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMessage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Unknown error'</token>
      </line>
      <line no="161">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="162"/>
      <line no="163">
        <token name="T_WHITESPACE">        </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$lastException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="165"/>
      <line no="166">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="167">
        <token name="T_DOC_COMMENT">     * Calculate backoff delay using exponential backoff with jitter</token>
      </line>
      <line no="168">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="169">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">calculate_backoff_delay</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="170">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$exponentialDelay</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">baseBackoffSeconds</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MULT">*</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">2</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_POW">**</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$attempt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="171"/>
      <line no="172">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Add jitter to prevent thundering herd</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$jitter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">random_int</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$exponentialDelay</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MULT">*</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DNUMBER">0.1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="174"/>
      <line no="175">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$delay</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exponentialDelay</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jitter</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="176"/>
      <line no="177">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">min</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$delay</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">maxBackoffSeconds</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="179"/>
      <line no="180">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="181">
        <token name="T_DOC_COMMENT">     * Get retry statistics for a job</token>
      </line>
      <line no="182">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="183">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">get_retry_stats</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jobId</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="184">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JsonLogger</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jobId</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="185">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$logs</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logTailLimit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Get recent logs</token>
      </line>
      <line no="186"/>
      <line no="187">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$stats</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="188">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'total_retries'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="189">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'successful_retries'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="190">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'failed_retries'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="191">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'backoff_time_total'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="192">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'error_types'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="193">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="194"/>
      <line no="195">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$logs</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="196">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'phase'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'phase'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'retry_attempt'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="197">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$stats</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'total_retries'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="199"/>
      <line no="200">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'phase'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'phase'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'retry_success'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$stats</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'successful_retries'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="203"/>
      <line no="204">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'phase'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'phase'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'retry_exhausted'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="205">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$stats</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'failed_retries'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="206">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="207"/>
      <line no="208">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'phase'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'phase'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'retry_backoff'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="209">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$stats</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'backoff_time_total'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS_EQUAL">+=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'backoff_seconds'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="210">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="211"/>
      <line no="212">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'phase'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'phase'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'retry_error'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="213">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$errorType</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'error_type'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'unknown'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="214">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stats</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'error_types'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$errorType</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="215">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$stats</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'error_types'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$errorType</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="216">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="217">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$stats</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'error_types'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$errorType</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="218">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="219">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="220"/>
      <line no="221">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stats</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="222">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="223"/>
      <line no="224">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="225">
        <token name="T_DOC_COMMENT">     * Check if a job should be retried based on its error history</token>
      </line>
      <line no="226">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="227">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">should_retry_job</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jobId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$job</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="228">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$job</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'errors'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$job</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'errors'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="229">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="230">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="231"/>
      <line no="232">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$recentErrors</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_slice</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$job</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'errors'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">recentLogsLimit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Last N errors</token>
      </line>
      <line no="233">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$recoverableCount</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="234"/>
      <line no="235">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$recentErrors</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$error</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="236">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">is_recoverable_error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$error</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$error</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'context'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="237">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$recoverableCount</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="238">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="239">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="240"/>
      <line no="241">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Retry if at least 60% of recent errors are recoverable</token>
      </line>
      <line no="242">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$recoverableCount</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DIV">/</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$recentErrors</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DNUMBER">0.6</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="243">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="244"/>
      <line no="245">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="246">
        <token name="T_DOC_COMMENT">     * Schedule a job retry with appropriate delay</token>
      </line>
      <line no="247">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="248">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">schedule_retry</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jobId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$job</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="249">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$errorCount</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$job</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'errors'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="250">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$delay</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">calculate_backoff_delay</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">min</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errorCount</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">maxRetries</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="251"/>
      <line no="252">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JsonLogger</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jobId</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="253">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">log</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'retry_scheduled'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'info'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">Scheduling job retry in </token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$delay</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_ENCAPSED_AND_WHITESPACE"> seconds</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="254">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'delay_seconds'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$delay</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="255">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'error_count'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errorCount</token>
      </line>
      <line no="256">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="257"/>
      <line no="258">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$delay</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="259">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="260">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="261"/>
    </source>
  </file>
</phpunit>
